# -*- coding: utf-8 -*-
from datetime import datetime

import requests
import telebot
from pycbrf import ExchangeRates
from mapAPI import MapAPI
import os
from flask import Flask, request
from data import format_kind

server = Flask(__name__)

PORT = int(os.environ.get('PORT', 5000))
TOKEN = "1719349692:AAHNGDF0WeCkGXy3Ef8uWuYXtWmzQF4VypE"
HEROKU_APP_NAME = "map-service-bot"
url = 'http://api.openweathermap.org/data/2.5/weather'
api_weather = 'e4a3da131fe7dd1aa4d06d1ded5c6963'
bot = telebot.TeleBot(TOKEN)
map_api = MapAPI()

main_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
main1 = telebot.types.KeyboardButton("üß≠–ö–∞—Ä—Ç–∞")
main2 = telebot.types.KeyboardButton("‚õÖ–ü–æ–≥–æ–¥–∞")
main3 = telebot.types.KeyboardButton("üí∏–í–∞–ª—é—Ç—ã")
main4 = telebot.types.KeyboardButton("‚ùì–ü–æ–º–æ—â—å")

main_markup.row(main1, main2, main3, main4)
back_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
back = telebot.types.KeyboardButton('‚¨Ö–ù–∞–∑–∞–¥')
back_markup.add(back)
currency_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)

currency1 = telebot.types.KeyboardButton("üí∑GBP")
currency2 = telebot.types.KeyboardButton("üí∂EUR")
currency3 = telebot.types.KeyboardButton("üí¥CNY")
currency4 = telebot.types.KeyboardButton("üíµUSD")
currency_markup.row(currency1, currency2, currency3, currency4)
currency_markup.add(back)

map_type_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
type1 = telebot.types.KeyboardButton("üóª–ü–æ–∏—Å–∫ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º")
type2 = telebot.types.KeyboardButton("üè¢–ü–æ–∏—Å–∫ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º")
map_type_markup.row(type1, type2)
map_type_markup.add(back)

geo_type_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
geo1 = telebot.types.KeyboardButton("üóª–ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤")
geo2 = telebot.types.KeyboardButton("üé™–ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–æ–ø–æ–Ω–∏–º–æ–≤ –∫ –æ–±—ä–µ–∫—Ç—É")
geo_type_markup.row(geo1, geo2)
geo_type_markup.add(back)

toponym_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
toponym1 = telebot.types.KeyboardButton("üè†–î–æ–º")
toponym2 = telebot.types.KeyboardButton("üõ£–£–ª–∏—Ü–∞")
toponym3 = telebot.types.KeyboardButton("üöá–ú–µ—Ç—Ä–æ")
toponym4 = telebot.types.KeyboardButton("üèô–†–∞–π–æ–Ω")
toponym5 = telebot.types.KeyboardButton("üèò–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç")
toponym_markup.row(toponym1, toponym2, toponym3)
toponym_markup.row(toponym4, toponym5)
toponym_markup.add(back)

results_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
results1 = telebot.types.KeyboardButton("1")
results2 = telebot.types.KeyboardButton("3")
results3 = telebot.types.KeyboardButton("5")
results_markup.add(results1, results2, results3, back)

request_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
request1 = telebot.types.KeyboardButton("‚û°–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
request_markup.add(request1, back)


@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, '–Ø –±–æ—Ç, —É–º–µ—é—â–∏–π —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–∞—Ä—Ç–∞–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏.'
                                      '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –≤–≤–µ–¥–∏—Ç–µ "–ü–æ–º–æ—â—å"', reply_markup=main_markup)


@bot.message_handler(commands=["help"])
def help(message):
    bot.send_message(message.chat.id, '''–≠—Ç–æ—Ç –±–æ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ä–∞–±–æ—Ç–µ —Å –∫–∞—Ä—Ç–∞–º–∏.
–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
layer/—Å–ª–æ–π: –ø–µ—Ä–µ—á–µ–Ω—å —Å–ª–æ–µ–≤, (—Å–ø—É—Ç–Ω–∏–∫, —Å—Ö–µ–º–∞, –≥–∏–±—Ä–∏–¥, —Ç—Ä–∞—Ñ—Ñ–∏–∫)
zoom/–º–∞—Å—à—Ç–∞–±: –º–∞—Å—à—Ç–∞–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ—Ç 0 –¥–æ 17)
scale/—É–≤–µ–ª–∏—á–µ–Ω–∏–µ: –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ (–æ—Ç 1.0 –¥–æ 4.0)
–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:
‚õÖ–ü–æ–≥–æ–¥–∞: –≤—ã–≤–æ–¥ –ø–æ–≥–æ–¥—ã –ø–æ –≥–æ—Ä–æ–¥—É
üí∏–í–∞–ª—é—Ç—ã: –∫—É—Ä—Å –≤–∞–ª—é—Ç (GBP, EUR, CNY, USD)
‚¨Ö–ù–∞–∑–∞–¥: –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.''')


@bot.message_handler(commands=["weather"])
def weather(message):
    if message is None:
        return
    bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞', reply_markup=back_markup)
    bot.register_next_step_handler(message, get_weather)


def get_weather(message):
    city_name = message.text.strip().lower()
    if city_name in ["‚¨Ö–Ω–∞–∑–∞–¥", "–Ω–∞–∑–∞–¥"]:
        bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥", reply_markup=main_markup)
        return
    try:
        params = {'APPID': api_weather, 'q': city_name, 'units': 'metric', 'lang': 'ru'}
        result = requests.get(url, params=params)
        weather = result.json()
        deg = weather['wind']['deg']
        wind_direction = [("–°", abs(0 - deg)), ("–í", abs(90 - deg)), ("–Æ", abs(180 - deg)), ("–ó", abs(270 - deg))]
        wind_direction.sort(key=lambda s: s[1])
        bot.send_message(message.chat.id,
                         f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {str(weather['name'])}:\n"
                         f"—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {str(int(weather['main']['temp']))}¬∞\n"
                         f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {str(int(weather['main']['feels_like']))}¬∞\n"
                         f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {str(float(weather['wind']['speed']))} –º/—Å, {wind_direction[0][0]}\n"
                         f"–î–∞–≤–ª–µ–Ω–∏–µ: {str(float(weather['main']['pressure']))} –º–º —Ä—Ç. —Å—Ç.\n"
                         f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {str(int(weather['main']['humidity']))}%\n"
                         f"–í–∏–¥–∏–º–æ—Å—Ç—å: {str(weather['visibility'])}\n"
                         f"–û–ø–∏—Å–∞–Ω–∏–µ: {str(weather['weather'][0]['description'])}\n", reply_markup=main_markup)
    except Exception:
        bot.send_message(message.chat.id, "–ì–æ—Ä–æ–¥ " + city_name + " –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=main_markup)


@bot.message_handler(commands=["currency"])
def currency(message):
    bot.send_message(chat_id=message.chat.id, text="–ö–∞–∫–æ–π –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                     reply_markup=currency_markup, parse_mode="html")
    bot.register_next_step_handler(message, exchange_rate)


def exchange_rate(message):
    text = message.text.strip().lower()
    if text in ['‚¨Ö–Ω–∞–∑–∞–¥', '–Ω–∞–∑–∞–¥']:
        bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥", reply_markup=main_markup)
    else:
        if text in ['üíµusd', 'üí∂eur', 'üí¥cny', 'üí∑gbp']:
            text = text[1:]
        if text in ['usd', 'eur', 'cny', 'gbp']:
            rates = ExchangeRates(datetime.now())
            bot.send_message(chat_id=message.chat.id,
                             text=f"<b>–°–µ–π—á–∞—Å –∫—É—Ä—Å: {text.upper()} = {float(rates[text.upper()].rate)}</b>",
                             parse_mode="html", reply_markup=main_markup)
        else:
            bot.send_message(message.chat.id, f'–ù–µ –Ω–∞–¥–π–µ–Ω –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã: {text.upper()}', reply_markup=main_markup)


@bot.message_handler(commands=['map'])
def map_command(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞", reply_markup=map_type_markup)
    bot.register_next_step_handler(message, map_type)


def map_type(message):
    text = message.text.strip().lower()
    if text in ["‚¨Ö–Ω–∞–∑–∞–¥", "–Ω–∞–∑–∞–¥"]:
        bot.send_message(message.chat.id, "–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_markup)
    elif text in ["üóª–ø–æ–∏—Å–∫ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º", "–ø–æ–∏—Å–∫ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º", "–æ–±—ä–µ–∫—Ç—ã"]:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", reply_markup=back_markup)
        bot.register_next_step_handler(message, geo)
    elif text in ["üè¢–ø–æ–∏—Å–∫ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º", "–ø–æ–∏—Å–∫ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º", "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"]:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏", reply_markup=back_markup)
        bot.register_next_step_handler(message, place)
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏–ø –ø–æ–∏—Å–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                         reply_markup=map_type_markup)
        bot.register_next_step_handler(message, map_type)


def geo(message):
    REQUEST.pop("geocode", None)
    text = message.text.strip().lower()
    if text in ["‚¨Ö–Ω–∞–∑–∞–¥", "–Ω–∞–∑–∞–¥"]:
        bot.send_message(message.chat.id, "–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞", reply_markup=map_type_markup)
        bot.register_next_step_handler(message, map_type)
    else:
        REQUEST["geocode"] = text
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º", reply_markup=geo_type_markup)
        bot.register_next_step_handler(message, geo_type)


def geo_type(message):
    text = message.text.strip().lower()
    if text in ["‚¨Ö–Ω–∞–∑–∞–¥", "–Ω–∞–∑–∞–¥"]:
        bot.send_message(message.chat.id, "–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", reply_markup=back_markup)
        bot.register_next_step_handler(message, geo)
    elif text in ["üóª–ø–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤", "–ø–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤", "–æ–±—ä–µ–∫—Ç—ã"]:
        bot.send_message(message.chat.id, "–ó–∞–¥–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", reply_markup=results_markup)
        bot.register_next_step_handler(message, results)
    elif text in ["üé™–ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–æ–ø–æ–Ω–∏–º–æ–≤ –∫ –æ–±—ä–µ–∫—Ç—É", "–ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–æ–ø–æ–Ω–∏–º–æ–≤ –∫ –æ–±—ä–µ–∫—Ç—É", "—Ç–æ–ø–æ–Ω–∏–º—ã"]:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ç–æ–ø–æ–Ω–∏–º–∞", reply_markup=toponym_markup)
        bot.register_next_step_handler(message, toponym)
    else:
        bot.send_message(message.chat.id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –ø–æ –æ–±—ä–µ–∫—Ç—É, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞",
                         reply_markup=geo_type_markup)
        bot.register_next_step_handler(message, geo_type)


def toponym(message):
    text = message.text.strip().lower()
    if text in ["‚¨Ö–Ω–∞–∑–∞–¥", "–Ω–∞–∑–∞–¥"]:
        bot.send_message(message.chat.id, "–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º",
                         reply_markup=geo_type_markup)
        bot.register_next_step_handler(message, geo_type)
    elif text in format_kind:
        REQUEST["kind"] = format_kind[text]
        bot.send_message(message.chat.id, "–ó–∞–¥–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", reply_markup=results_markup)
        bot.register_next_step_handler(message, results)
    else:
        bot.send_message(message.chat.id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–∏–¥ —Ç–æ–ø–æ–Ω–∏–º–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=toponym_markup)
        bot.register_next_step_handler(message, toponym)


def place(message):
    REQUEST.pop("place", None)
    text = message.text.strip().lower()
    if text in ["‚¨Ö–Ω–∞–∑–∞–¥", "–Ω–∞–∑–∞–¥"]:
        bot.send_message(message.chat.id, "–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞", reply_markup=map_type_markup)
        bot.register_next_step_handler(message, map_type)
    else:
        REQUEST["place"] = text
        bot.send_message(message.chat.id, "–ó–∞–¥–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", reply_markup=results_markup)
        bot.register_next_step_handler(message, results)


def results(message):
    REQUEST.pop("results", None)
    text = message.text.strip().lower()
    if text in ["‚¨Ö–Ω–∞–∑–∞–¥", "–Ω–∞–∑–∞–¥"]:
        bot.send_message(message.chat.id, "–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞",
                         reply_markup=map_type_markup)
        bot.register_next_step_handler(message, map_type)
    elif text.isdigit():
        REQUEST["results"] = text
        bot.send_message(message.chat.id, '–ó–∞–¥–∞–π—Ç–µ –≤—Ä—É—á–Ω—É—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ –∏—Ö –ø–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '
                                          '<–ø–∞—Ä–∞–º–µ—Ç—Ä>=<–∑–Ω–∞—á–µ–Ω–∏–µ>, –ø–µ—Ä–µ—á–∏—Å–ª—è—è —Å –ø–æ–æ–º–æ—â—å—é ";"',
                         reply_markup=request_markup)
        bot.register_next_step_handler(message, make_request)
    else:
        bot.send_message(message.chat.id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞",
                         reply_markup=results_markup)
        bot.register_next_step_handler(message, results)


def make_request(message):
    global REQUEST
    text = message.text.strip().lower()
    if text in ["‚¨Ö–Ω–∞–∑–∞–¥", "–Ω–∞–∑–∞–¥"]:
        bot.send_message(message.chat.id, "–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥, –∑–∞–¥–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                         reply_markup=results_markup)
        bot.register_next_step_handler(message, results)
        return
    elif text not in ["‚û°–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]:
        REQUEST.update({param.split("=")[0]: param.split("=")[1] for param in text.split(';')})
    output = map_api.main(";".join([f"{key}={value}" for key, value in REQUEST.items()]))
    if isinstance(output, str):
        bot.send_message(message.chat.id, output, reply_markup=main_markup)
    else:
        im = open("map.png", "rb")
        description = []
        for d in output:
            raw = []
            for key, value in d.items():
                if key != 'spn':
                    raw.append(f"{key}: {value}")
            description.append('\n'.join(raw))
        description.insert(0, f'–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(description)}:')
        description = '\n\n'.join(description)
        if len(description) > 963:
            description = description[:963] + "...\n...–æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é"
        bot.send_photo(message.chat.id, im, caption=description, reply_markup=main_markup)
    REQUEST = {}


@bot.message_handler(content_types=["text"])
def dialog(message):
    text = message.text.strip().lower()
    if text in ["üß≠–∫–∞—Ä—Ç–∞", "–∫–∞—Ä—Ç–∞"]:
        map_command(message)
    elif text in ["‚õÖ–ø–æ–≥–æ–¥–∞", "–ø–æ–≥–æ–¥–∞"]:
        weather(message)
    elif text in ["üí∏–≤–∞–ª—é—Ç—ã", "–≤–∞–ª—é—Ç—ã"]:
        currency(message)
    elif text in ["‚ùì–ø–æ–º–æ—â—å", "–ø–æ–º–æ—â—å"]:
        help(message)
    elif text.startswith('/'):
        bot.send_message(message.chat.id, f'–ù–µ—Ç –∫–æ–º–∞–Ω–¥—ã "{text}"', reply_markup=main_markup)
    elif text in ['‚¨Ö–Ω–∞–∑–∞–¥', '–Ω–∞–∑–∞–¥']:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–π –∫–æ–º–º–∞–Ω–¥—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç", reply_markup=main_markup)


@server.route('/' + TOKEN, methods=['POST'])
def getMessage():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return "!", 200


@server.route("/")
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url=f"https://{HEROKU_APP_NAME}.herokuapp.com/{TOKEN}")
    return "?", 200


if __name__ == '__main__':
    REQUEST = {}
    server.run(host="0.0.0.0", port=PORT)
