# -*- coding: utf-8 -*-
import os
import requests
import telebot
from flask import Flask, request
from data import TOKEN, bot, HEROKU_APP_NAME, format_kind
from markups import main_markup, back_markup, map_type_markup, geo_type_markup, toponym_markup, results_markup, \
    request_markup
from mapAPI import map_api
from getWeather import get_weather

server = Flask(__name__)

PORT = int(os.environ.get('PORT', 5000))


@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, '–Ø –±–æ—Ç, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å –∫–∞—Ä—Ç–∞–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏. '
                                      '–ü–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ "‚ùì –ü–æ–º–æ—â—å"',
                     reply_markup=main_markup)


@bot.message_handler(commands=["help"])
def help(message):
    bot.send_message(message.chat.id, '''
–ö–æ–º–∞–Ω–¥—ã:

üß≠ *–ö–∞—Ä—Ç–∞*
*–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:*
geocode/–≥–µ–æ–∫–æ–¥: –∞–¥—Ä–µ—Å –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞
kind/—Ç–æ–ø–æ–Ω–∏–º: —Ç–æ–ø–æ–Ω–∏–º–∞
place/–º–µ—Å—Ç–æ: –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
results/—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:*
l/layer/—Å–ª–æ–π: –ø–µ—Ä–µ—á–µ–Ω—å —Å–ª–æ–µ–≤ (—Å–ø—É—Ç–Ω–∏–∫, —Å—Ö–µ–º–∞, –≥–∏–±—Ä–∏–¥, —Ç—Ä–∞—Ñ—Ñ–∏–∫)
z/zoom/–º–∞—Å—à—Ç–∞–±: —É—Ä–æ–≤–µ–Ω—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (0-17)
s/scale/—É–≤–µ–ª–∏—á–µ–Ω–∏–µ: –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ (1.0-4.0)

‚õÖ *–ü–æ–≥–æ–¥–∞* 
–í—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, –∞ –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞

‚¨Ö *–ù–∞–∑–∞–¥*
–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–∞–¥
''', parse_mode="Markdown")


@bot.message_handler(commands=["weather"])
def weather(message):
    if message is None:
        return
    bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞', reply_markup=back_markup)
    bot.register_next_step_handler(message, get_weather)


@bot.message_handler(commands=['map'])
def map_command(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞", reply_markup=map_type_markup)
    bot.register_next_step_handler(message, map_type)


def map_type(message):
    text = message.text.strip().lower()
    if text in ["üóª –ø–æ–∏—Å–∫ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º", "–ø–æ–∏—Å–∫ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º", "–æ–±—ä–µ–∫—Ç—ã"]:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", reply_markup=back_markup)
        bot.register_next_step_handler(message, geo)
    elif text in ["üè¢ –ø–æ–∏—Å–∫ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º", "–ø–æ–∏—Å–∫ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º", "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"]:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏", reply_markup=back_markup)
        bot.register_next_step_handler(message, place)
    elif text in ["‚å® –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", "–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", "–≤—Ä—É—á–Ω—É—é"]:
        pass
    elif text in ["‚¨Ö –Ω–∞–∑–∞–¥", "–Ω–∞–∑–∞–¥"]:
        bot.send_message(message.chat.id, "–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_markup)
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏–ø –ø–æ–∏—Å–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                         reply_markup=map_type_markup)
        bot.register_next_step_handler(message, map_type)


def geo(message):
    REQUEST.pop("geocode", None)
    text = message.text.strip().lower()
    if text in ["‚¨Ö –Ω–∞–∑–∞–¥", "–Ω–∞–∑–∞–¥"]:
        bot.send_message(message.chat.id, "–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞", reply_markup=map_type_markup)
        bot.register_next_step_handler(message, map_type)
    else:
        REQUEST["geocode"] = text
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º", reply_markup=geo_type_markup)
        bot.register_next_step_handler(message, geo_type)


def geo_type(message):
    text = message.text.strip().lower()
    if text in ["üóª –ø–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤", "–ø–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤", "–æ–±—ä–µ–∫—Ç—ã"]:
        bot.send_message(message.chat.id, "–ó–∞–¥–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", reply_markup=results_markup)
        bot.register_next_step_handler(message, results)
    elif text in ["üé™ –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–æ–ø–æ–Ω–∏–º–æ–≤ –∫ –æ–±—ä–µ–∫—Ç—É", "–ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–æ–ø–æ–Ω–∏–º–æ–≤ –∫ –æ–±—ä–µ–∫—Ç—É", "—Ç–æ–ø–æ–Ω–∏–º—ã"]:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ç–æ–ø–æ–Ω–∏–º–∞", reply_markup=toponym_markup)
        bot.register_next_step_handler(message, toponym)
    elif text in ["‚¨Ö –Ω–∞–∑–∞–¥", "–Ω–∞–∑–∞–¥"]:
        bot.send_message(message.chat.id, "–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", reply_markup=back_markup)
        bot.register_next_step_handler(message, geo)
    else:
        bot.send_message(message.chat.id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –ø–æ –æ–±—ä–µ–∫—Ç—É, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞",
                         reply_markup=geo_type_markup)
        bot.register_next_step_handler(message, geo_type)


def toponym(message):
    REQUEST.pop("kind", None)
    text = message.text.strip().lower()
    if text in ["‚¨Ö –Ω–∞–∑–∞–¥", "–Ω–∞–∑–∞–¥"]:
        bot.send_message(message.chat.id, "–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º",
                         reply_markup=geo_type_markup)
        bot.register_next_step_handler(message, geo_type)
    elif text in format_kind:
        REQUEST["kind"] = format_kind[text]
        bot.send_message(message.chat.id, "–ó–∞–¥–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", reply_markup=results_markup)
        bot.register_next_step_handler(message, results)
    else:
        bot.send_message(message.chat.id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–∏–¥ —Ç–æ–ø–æ–Ω–∏–º–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=toponym_markup)
        bot.register_next_step_handler(message, toponym)


def place(message):
    REQUEST.pop("place", None)
    text = message.text.strip().lower()
    if text in ["‚¨Ö –Ω–∞–∑–∞–¥", "–Ω–∞–∑–∞–¥"]:
        bot.send_message(message.chat.id, "–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞", reply_markup=map_type_markup)
        bot.register_next_step_handler(message, map_type)
    else:
        REQUEST["place"] = text
        bot.send_message(message.chat.id, "–ó–∞–¥–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", reply_markup=results_markup)
        bot.register_next_step_handler(message, results)


def results(message):
    REQUEST.pop("results", None)
    text = message.text.strip().lower()
    if text in ["‚¨Ö –Ω–∞–∑–∞–¥", "–Ω–∞–∑–∞–¥"]:
        bot.send_message(message.chat.id, "–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞",
                         reply_markup=map_type_markup)
        bot.register_next_step_handler(message, map_type)
    elif text.isdigit():
        REQUEST["results"] = text
        bot.send_message(message.chat.id, '–ó–∞–¥–∞–π—Ç–µ –≤—Ä—É—á–Ω—É—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. '
                                          '–î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ <–ø–∞—Ä–∞–º–µ—Ç—Ä>=<–∑–Ω–∞—á–µ–Ω–∏–µ>, –ø–µ—Ä–µ—á–∏—Å–ª—è—è —Å '
                                          '–ø–æ–æ–º–æ—â—å—é ";"',
                         reply_markup=request_markup)
        bot.register_next_step_handler(message, make_request)
    else:
        bot.send_message(message.chat.id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞",
                         reply_markup=results_markup)
        bot.register_next_step_handler(message, results)


def make_request(message):
    global REQUEST
    text = message.text.strip().lower()
    if text in ["‚¨Ö –Ω–∞–∑–∞–¥", "–Ω–∞–∑–∞–¥"]:
        bot.send_message(message.chat.id, "–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥, –∑–∞–¥–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                         reply_markup=results_markup)
        bot.register_next_step_handler(message, results)
        return
    elif text not in ["‚û° –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]:
        REQUEST.update({param.split("=")[0]: param.split("=")[1] for param in text.split(';')})
    output = map_api.main(";".join([f"{key}={value}" for key, value in REQUEST.items()]))
    if isinstance(output, str):
        bot.send_message(message.chat.id, output, reply_markup=main_markup)
    else:
        im = open("map.png", "rb")
        description = []
        for d in output:
            raw = []
            for key, value in d.items():
                if key != 'spn':
                    raw.append(f"{key}: {value}")
            description.append('\n'.join(raw))
        description.insert(0, f'–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(description)}:')
        description = '\n\n'.join(description)
        if len(description) > 963:
            description = description[:963] + "...\n...–æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é"
        bot.send_photo(message.chat.id, im, caption=description, reply_markup=main_markup)
    REQUEST = {}


@bot.message_handler(content_types=["text"])
def dialog(message):
    text = message.text.strip().lower()
    if text in ['‚¨Ö –Ω–∞–∑–∞–¥', '–Ω–∞–∑–∞–¥']:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–π –∫–æ–º–º–∞–Ω–¥—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç", reply_markup=main_markup)
    elif text in ["üß≠ –∫–∞—Ä—Ç–∞", "–∫–∞—Ä—Ç–∞"]:
        map_command(message)
    elif text in ["‚õÖ –ø–æ–≥–æ–¥–∞", "–ø–æ–≥–æ–¥–∞"]:
        weather(message)
    elif text in ["‚ùì –ø–æ–º–æ—â—å", "–ø–æ–º–æ—â—å"]:
        help(message)
    elif text.startswith('/'):
        bot.send_message(message.chat.id, f'–ù–µ—Ç –∫–æ–º–∞–Ω–¥—ã "{text}"', reply_markup=main_markup)
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å", reply_markup=main_markup)


@server.route('/' + TOKEN, methods=['POST'])
def getMessage():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return "!", 200


@server.route("/")
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url=f"https://{HEROKU_APP_NAME}.herokuapp.com/{TOKEN}")
    return "?", 200


if __name__ == '__main__':
    REQUEST = {}
    server.run(host="0.0.0.0", port=PORT)
